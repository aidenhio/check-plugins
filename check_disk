#!/bin/bash
# shellcheck disable=SC2312

# Plugin Name: check_disk
# Description: Check disk usage
# Date: 01/01/2025

# Flags
ALLOW_ZERO_INPUT=true
PREFIX="DISK"

# Global Variables
WARNING_LEVEL=80
CRITICAL_LEVEL=90
MOUNT="/"

# Main
function main()
{
    local df_out avail_kb total_kb used_kb 
    local used_pct warn_pct crit_pct
    local f_free f_total f_used
    local message data

    # Get disk stats
    df_out=$(df -P "$MOUNT" 2>/dev/null | awk 'NR==2')
    if [[ -z "$df_out" ]]; then
        handle_unknown "Mount point not found: $MOUNT"
    fi

    # Calculate disk usage values
    avail_kb=$(echo "$df_out" | awk '{print $4}')
    total_kb=$(echo "$df_out" | awk '{print $2}')
    used_kb=$(echo "$df_out" | awk '{print $3}')

    used_pct=$(echo "$df_out" | awk '{print $5}' | tr -d '%')
    warn_pct=$(awk "BEGIN {print int(($WARNING_LEVEL / 100) * $total_kb )}")
    crit_pct=$(awk "BEGIN {print int(($CRITICAL_LEVEL / 100) * $total_kb )}")

    # Generate output
    f_free=$(format_bytes "$avail_kb")
    f_total=$(format_bytes "$total_kb")
    f_used=$(format_bytes "$used_kb")
    # message="$MOUNT is ${used_pct}% used, ${f_free} free of ${f_total} (${f_used} used)"
    message="$MOUNT is ${used_pct}% used, ${f_used} used of ${f_total} (${f_free} free)"
    data="disk_used=${used_kb}KB;${warn_pct};${crit_pct};; disk_free=${avail_kb}KB;;;;"

    # Compare to threshold values
    if (( $(echo "${used_pct}  >= ${CRITICAL_LEVEL}" | bc -l) )); then
        handle_critical "${message}" "${data}"
    elif (( $(echo "${used_pct}  >= ${WARNING_LEVEL}" | bc -l) )); then
        handle_warning "${message}" "${data}"
    elif (( $(echo "${used_pct}  >= 0" | bc -l) )); then
        handle_ok "${message}" "${data}"
    else
        handle_unknown "Invalid value" "${data}"
    fi
}

# Format byte values base on magnitude
function format_bytes() {
    local kb="$1"
    local unit="KB"
    local value="$kb"

    if (( kb >= 1024 * 1024 * 1024 )); then
        value=$(awk "BEGIN {printf \"%.2f\", $kb/1073741824}")
        unit="TB"
    elif (( kb >= 1024 * 1024 )); then
        value=$(awk "BEGIN {printf \"%.2f\", $kb/1048576}")
        unit="GB"
    elif (( kb >= 1024 )); then
        value=$(awk "BEGIN {printf \"%.2f\", $kb/1024}")
        unit="MB"
    fi

    echo "${value}${unit}"
}


# Usage (-h parameter)
function usage()
{
cat <<EOF
  Usage: $0 [ -h ] -p <path> [ -c value ] [ -w value ]
    -h, --help      : Print this screen
    -p, --path      : Mount point to check [Default: ${MOUNT_POINT}]
    -c, --critical  : Critical percentage of disk used [Default: ${CRITICAL_LEVEL}]
    -w, --warning   : Warn percentage of disk used [Default: ${WARNING_LEVEL}]   
EOF
    exit 0
}

# Process Arguments
function process_arguments()
{
    # Check if no arguments is allowed
    if [[ "${ALLOW_ZERO_INPUT}" = false ]] && [[ $# -eq 0 ]]; then
        handle_unknown "No parameters given"
    fi

    # Define short and long options
    SHORTOPTS=h,c:,w:,p:
    LONGOPTS=help,critical:,warning:,path:

    # Parse options using getopt
    OPTIONS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
        handle_unknown "Failed to parse arguments"
    fi

    # Reorder positional parameters
    eval set -- "${OPTIONS}"

    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -c|--critical)
                CRITICAL_LEVEL="$2"
                shift 2
                ;;
            -w|--warning)
                WARNING_LEVEL="$2"
                shift 2
                ;;
            -p|--path)
                MOUNT="$2"
                shift 2
                ;;    
            --)
                shift
                break
                ;;
            *)
                handle_unknown "Unknown option: $1"
                ;;
        esac
    done

    # Validate warning and critical values
    if (( $(echo "${WARNING_LEVEL} >= ${CRITICAL_LEVEL}" | bc -l) )); then
        handle_unknown "Warning threshold must be lower than critical threshold"
    fi

    main
}

# Handle OK / Warning / Critical / Unknown
function handle_ok() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }OK - ${message}${perfdata:+ | ${perfdata}}"
    exit 0
}

function handle_warning() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }WARNING - ${message}${perfdata:+ | ${perfdata}}"
    exit 1
}

function handle_critical() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }CRITICAL - ${message}${perfdata:+ | ${perfdata}}"
    exit 2
}

function handle_unknown() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }UNKNOWN - ${message}${perfdata:+ | ${perfdata}}"
    exit 3
}

# Core
process_arguments "${@}"