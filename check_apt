#!/bin/bash
# shellcheck disable=SC2312

# Plugin Name: check_apt
# Description: Checks pending recommedend and secuirty updates
# Date: 03/10/2025

# Flags
ALLOW_ZERO_INPUT=true
PREFIX="APT"

# Global Variables
WARNING_TOTAL=25  # if 25 updates pending, warn
CRITICAL_TOTAL=50 # if 50 updates pending, crit

WARNING_SECURITY=10   # if 10 sec updates pending, warn
CRITICAL_SECURITY=20  # if 20 sec updates pending, crit

# Main
function main()
{
    local check_updates total_updates security_updates recommended_updates
    local message data

    # Get update counts from apt-check
    check_updates=$(/usr/lib/update-notifier/apt-check 2>&1)

    # Parse total and security updates
    total_updates=$(echo "$check_updates" | cut -d';' -f1)
    security_updates=$(echo "$check_updates" | cut -d';' -f2)

    # Calculate recommended (non-security) updates
    recommended_updates=$((total_updates - security_updates))

    # Generate output
    message="$total_updates packages available for upgrade ($security_updates security updates)"
    data="total_updates=$total_updates, recommended_updates=$recommended_updates, security_updates=$security_updates"

    # Compare to threshold values
    if [[ $(echo "${total_updates} >= ${CRITICAL_TOTAL}" | bc -l) -eq 1 ]] || \
    [[ $(echo "${security_updates} >= ${CRITICAL_SECURITY}" | bc -l) -eq 1 ]]; then
        handle_critical "${message}" "${data}"

    elif [[ $(echo "${total_updates} >= ${WARNING_TOTAL}" | bc -l) -eq 1 ]] || \
        [[ $(echo "${security_updates} >= ${WARNING_SECURITY}" | bc -l) -eq 1 ]]; then
        handle_warning "${message}" "${data}"

    elif [[ $(echo "${total_updates} >= 0" | bc -l) -eq 1 ]]; then
        handle_ok "${message}" "${data}"

    else
        handle_unknown "Invalid apt-check value ${data}"
    fi
}

# Usage (-h parameter)
function usage()
{
cat <<EOF
  Usage: $0 [ -h ] [ -c value ] [ -w value ]
    -h, --help                  : Print this screen
    -c, --critical-total        : Critical number of total updates pending [Default: ${CRITICAL_TOTAL}]
    -w, --warning-total         : Warning number of total updates pending [Default: ${WARNING_TOTAL}]
    --critical-security         : Critical number of security updates pending [Default: ${CRITICAL_SECURITY}]
    --warning-security          : Warning number of security updates pending [Default: ${WARNING_SECURITY}]
EOF
    exit 0
}

# Process Arguments
function process_arguments()
{
    # Check if no arguments is allowed
    if [[ "${ALLOW_ZERO_INPUT}" = false ]] && [[ $# -eq 0 ]]; then
        handle_unknown "No parameters given"
    fi

    # Define short and long options
    SHORTOPTS=h,c:,w:
    LONGOPTS=help,critical-total:,warning-total:,critical-security:,warning-security:

    # Parse options using getopt
    OPTIONS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
        handle_unknown "Failed to parse arguments"
    fi

    # Reorder positional parameters
    eval set -- "${OPTIONS}"

    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            --c|--critical-total)
                CRITICAL_TOTAL="$2"
                shift 2
                ;;
            -w|--warning-total)
                WARNING_TOTAL="$2"
                shift 2
                ;;
            --critical-security)
                CRITICAL_SECURITY="$2"
                shift 2
                ;;
            --warning-security)
                WARNING_SECURITY="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                handle_unknown "Unknown option: $1"
                ;;
        esac
    done

    # Validate warning and critical values
    if (( $(echo "${WARNING_TOTAL} >= ${CRITICAL_TOTAL}" | bc -l) )); then
        handle_unknown "Warning threshold for total updates must be lower than critical threshold for total updates"
    fi
    if (( $(echo "${WARNING_SECURITY} > ${CRITICAL_SECURITY}" | bc -l) )); then
        handle_unknown "Warning threshold for security updates must be lower than critical threshold for security updates"
    fi
    
    main
}

# Handle OK / Warning / Critical / Unknown
function handle_ok() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }OK - ${message}${perfdata:+ | ${perfdata}}"
    exit 0
}

function handle_warning() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }WARNING - ${message}${perfdata:+ | ${perfdata}}"
    exit 1
}

function handle_critical() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }CRITICAL - ${message}${perfdata:+ | ${perfdata}}"
    exit 2
}

function handle_unknown() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }UNKNOWN - ${message}${perfdata:+ | ${perfdata}}"
    exit 3
}

# Core
process_arguments "${@}"