#!/bin/bash
# shellcheck disable=SC2312

# Plugin Name: check_file
# Description: Check for the (non) existence of a file',
# Date: 05/10/2025

# Flags
ALLOW_ZERO_INPUT=false
PREFIX="FILE"

# Global Variables
MODE=""
WARN_MODE=false
FILE_PATH=""

# Main
function main()
{
    local present_message absent_message

    # Generate output
    present_message="${FILE_PATH} found"
    absent_message="${FILE_PATH} not found"

    # Check for file
    if [[ "$MODE" == "--present" ]]; then
        if [[ -e "$FILE_PATH" ]]; then
            handle_ok "${present_message}"
        else
            if [[ "$WARN_MODE" == true ]]; then
                handle_warning "${absent_message}"
            else
                handle_critical "${absent_message}"
            fi
        fi
    elif [[ "$MODE" == "--absent" ]]; then
        if [[ -e "$FILE_PATH" ]]; then
            if [[ "$WARN_MODE" == true ]]; then
                handle_warning "${present_message}"
            else
                handle_critical "${present_message}"
            fi
        else
            handle_ok "${absent_message}"
        fi
    fi
}

# Usage (-h parameter)
function usage()
{
cat <<EOF
  Usage: $0 [--present | --absent] <file_path>
    --present        : OK if file exists, CRITICAL if not
    --absent         : OK if file does not exist, CRITICAL if it does
    --warn           : Warn instead of critical
    -h, --help       : Print this screen
EOF
    exit 0
}

# Process Arguments
function process_arguments()
{
    # Check if no arguments is allowed
    if [[ "${ALLOW_ZERO_INPUT}" = false ]] && [[ $# -eq 0 ]]; then
        handle_unknown "No parameters given"
    fi

    # Define short and long options
    SHORTOPTS=h
    LONGOPTS=help,present,absent,warn

    # Parse options using getopt
    OPTIONS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
        handle_unknown "Failed to parse arguments"
    fi

    # Reorder positional parameters
    eval set -- "${OPTIONS}"

    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            --present)
                MODE="--present"
                shift
                ;;
            --absent)
                MODE="--absent"
                shift
                ;;
            --warn)
                WARN_MODE=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                handle_unknown "Unknown option: $1"
                ;;
        esac
    done

    FILE_PATH="$1"

    # Error if arguments missing
    if [[ -z "$MODE" || -z "$FILE_PATH" ]]; then
        handle_unknown "Missing required arguments"
    fi

    main
}

# Handle OK / Warning / Critical / Unknown
function handle_ok() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }OK - ${message}${perfdata:+ | ${perfdata}}"
    exit 0
}

function handle_warning() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }WARNING - ${message}${perfdata:+ | ${perfdata}}"
    exit 1
}

function handle_critical() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }CRITICAL - ${message}${perfdata:+ | ${perfdata}}"
    exit 2
}

function handle_unknown() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }UNKNOWN - ${message}${perfdata:+ | ${perfdata}}"
    exit 3
}

# Core
process_arguments "${@}"