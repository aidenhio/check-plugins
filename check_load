#!/bin/bash
# shellcheck disable=SC2312

# Plugin Name: check_load
# Description: Checks system load average
# Date: 04/10/2025

# Flags
ALLOW_ZERO_INPUT=true
PREFIX="LOAD"

# Global Variables
WARNING_LEVEL="5.0,4.0,3.0"
CRITICAL_LEVEL="10.0,6.0,4.0"

# Main
function main()
{
    local l1 l5 l15
    local w1 w5 w15
    local c1 c5 c15
    local message data

    # Read system load averages
    read l1 l5 l15 _ < /proc/loadavg

    # Parse thresholds
    IFS=',' read -r w1 w5 w15 <<< "${WARNING_LEVEL}"
    IFS=',' read -r c1 c5 c15 <<< "${CRITICAL_LEVEL}"

    # Generate output
    message="Load average: ${l1}, ${l5}, ${l15}"
    data="load_1m=${l1};${w1};${c1} load_5m=${l5};${w5};${c5} load_15m=${l15};${w15};${c15}"
    
    # Error on non-number load average value
    if ! [[ "$l1" =~ ^[0-9]+(\.[0-9]+)?$ && "$l5" =~ ^[0-9]+(\.[0-9]+)?$ && "$l15" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
        handle_unknown "Malformed load average values" "${data}"
    fi

    # Compare to threshold values
    if awk_greater "$l1" "$c1" || awk_greater "$l5" "$c5" || awk_greater "$l15" "$c15"; then
        handle_critical "${message}" "${data}"
    elif awk_greater "$l1" "$w1" || awk_greater "$l5" "$w5" || awk_greater "$l15" "$w15"; then
        handle_warning "${message}" "${data}"
    else
        handle_ok "${message}" "${data}"
    fi
}

# Comparision helper
function awk_greater() {
    awk -v a="$1" -v b="$2" 'BEGIN { exit (a > b ? 0 : 1) }'
}

# Usage (-h parameter)
function usage()
{
cat <<EOF
  Usage: $0 [ -h ] [ -c value ] [ -w value ]
    -h, --help      : Print this screen
    -c, --critical  : Critical load average level (1,5,15 min) [Default: ${CRITICAL_LEVEL}]
    -w, --warning   : Warning load average level (1,5,15 min) [Default: ${WARNING_LEVEL}]
EOF
    exit 0
}

# Process Arguments
function process_arguments()
{
    # Check if no arguments is allowed
    if [[ "${ALLOW_ZERO_INPUT}" = false ]] && [[ $# -eq 0 ]]; then
        handle_unknown "No parameters given"
    fi

    # Define short and long options
    SHORTOPTS=h,c:,w:
    LONGOPTS=help,critical:,warning:

    # Parse options using getopt
    OPTIONS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
        handle_unknown "Failed to parse arguments"
    fi

    # Reorder positional parameters
    eval set -- "${OPTIONS}"

    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -c|--critical)
                CRITICAL_LEVEL="$2"
                shift 2
                ;;
            -w|--warning)
                WARNING_LEVEL="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                handle_unknown "Unknown option: $1"
                ;;
        esac
    done
    
    # Validate warning and critical values
    IFS=',' read -r w1 w5 w15 <<< "${WARNING_LEVEL}"
    IFS=',' read -r c1 c5 c15 <<< "${CRITICAL_LEVEL}"

    if ! awk_greater "$c1" "$w1" || ! awk_greater "$c5" "$w5" || ! awk_greater "$c15" "$w15"; then
        handle_unknown "Warning thresholds must be lower than critical thresholds"
    fi

    main
}

# Handle OK / Warning / Critical / Unknown
function handle_ok() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }OK - ${message}${perfdata:+ | ${perfdata}}"
    exit 0
}

function handle_warning() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }WARNING - ${message}${perfdata:+ | ${perfdata}}"
    exit 1
}

function handle_critical() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }CRITICAL - ${message}${perfdata:+ | ${perfdata}}"
    exit 2
}

function handle_unknown() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }UNKNOWN - ${message}${perfdata:+ | ${perfdata}}"
    exit 3
}

# Core
process_arguments "${@}"