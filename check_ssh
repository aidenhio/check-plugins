#!/bin/bash

# Plugin Name: check_ssh
# Description: Checks for SSH connection to selected endpoint
# Date: 01/01/2025

# Flags
ALLOW_ZERO_INPUT=true
PREFIX="SSH"

# Global Variables
PORT=22
TIMEOUT=10

# Main
function main()
{
    # Attempt to grab SSH banner
    BANNER=$(timeout "$TIMEOUT" bash -c "exec 3<>/dev/tcp/$HOST/$PORT; head -n 1 <&3 2>/dev/null" || true)

    # Attempt TCP connection
    if [[ -n "$BANNER" && "$BANNER" =~ ^SSH-([0-9.]+)-(OpenSSH.*) ]]; then
        VERSION="${BASH_REMATCH[2]}"
        VERSION="${VERSION//$'\r'/}"
        handle_ok "$HOST:$PORT is reachable ($VERSION)"
    else
        handle_critical "No banner or connection failed to $HOST:$PORT"
    fi
}

# Usage (-h parameter)
function usage()
{
cat <<EOF
  "Usage: $0 -H <host> [-p <port>] [-t <timeout>]"
    -h              : Print this screen
    -H, --host      : Host name, IP Address, or unix socket
    -p, --port      : Port number [Default: ${PORT}]
    -t, --timeout   : Seconds before connection times out [Default: ${TIMEOUT}] 
EOF
    exit 0
}

# Process Arguments
function process_arguments()
{
    # Check if no arguments is allowed
    if [[ "${ALLOW_ZERO_INPUT}" = false ]] && [[ $# -eq 0 ]]; then
        handle_unknown "No parameters given"
    fi

    # Define short and long options
    SHORTOPTS=h,H:,p:,t:
    LONGOPTS=help,host:,port:,timeout:

    # Parse options using getopt
    OPTIONS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
        handle_unknown "Failed to parse arguments"
    fi

    # Reorder positional parameters
    eval set -- "${OPTIONS}"

    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -H|--host)
                HOST="$2"
                shift 2
                ;;
            -p|--port)
                PORT="$2"
                shift 2
                ;;
            -t|--timeout)
                TIMEOUT="$2"
                shift 2
                ;;    
            --)
                shift
                break
                ;;
            *)
                handle_unknown "Unknown option: $1"
                ;;
        esac
    done
    
    main
}

# Handle OK / Warning / Critical / Unknown
function handle_ok() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }OK - ${message}${perfdata:+ | ${perfdata}}"
    exit 0
}

function handle_warning() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }WARNING - ${message}${perfdata:+ | ${perfdata}}"
    exit 1
}

function handle_critical() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }CRITICAL - ${message}${perfdata:+ | ${perfdata}}"
    exit 2
}

function handle_unknown() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }UNKNOWN - ${message}${perfdata:+ | ${perfdata}}"
    exit 3
}

# Core
process_arguments "${@}"