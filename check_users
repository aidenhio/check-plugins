#!/bin/bash
# shellcheck disable=SC2312

# Plugin Name: check_users
# Description: Check number of currently login in users
# Date: 13/10/2025

# Flags
ALLOW_ZERO_INPUT=true
PREFIX="USERS"

# Global Variables
WARNING_LEVEL=4
CRITICAL_LEVEL=6
SESSIONS=0

# Main
function main()
{
    local user_count
    local message data

    # Run check
    if [ "$SESSIONS" -eq 1 ]; then
        user_count=$(who | wc -l)
    else
        user_count=$(who | awk '{print $1}' | sort | uniq | wc -l)
    fi    

    # Generate output
    if [ "$user_count" -eq 0 ]; then
        message="No users currently logged in"
    elif [ "$user_count" -eq 1 ]; then
        message="1 user currently logged in"
    else
        message="${user_count} users currently logged in"
    fi

    data="users=${user_count};$WARNING_LEVEL;$CRITICAL_LEVEL;;"

    # Compare to threshold values
    if (( $(echo "${user_count} >= ${CRITICAL_LEVEL}" | bc -l) )); then
        handle_critical "${message}" "${data}"
    elif (( $(echo "${user_count} >= ${WARNING_LEVEL}" | bc -l) )); then
        handle_warning "${message}" "${data}"
    elif (( $(echo "${user_count} >= 0" | bc -l) )); then
        handle_ok "${message}" "${data}"
    else
        handle_unknown "Invalid user count" "${data}"
    fi
}

# Usage (-h parameter)
function usage()
{
cat <<EOF
  Usage: $0 [ -h ] [ -s ] [ -c value ] [ -w value ]
    -h, --help          : Print this screen
    -a, --all-sessions  : Count all logged in sessions, even if same user [Default: false]
    -c, --critical      : Critical number of logged in users [Default: ${CRITICAL_LEVEL}]
    -w, --warning       : Warn number of logged in users [Default: ${WARNING_LEVEL}]
EOF
    exit 0
}

# Process Arguments
function process_arguments()
{
    # Check if no arguments is allowed
    if [[ "${ALLOW_ZERO_INPUT}" = false ]] && [[ $# -eq 0 ]]; then
        handle_unknown "No parameters given"
    fi

    # Define short and long options
    SHORTOPTS=h,a,c:,w:
    LONGOPTS=help,all-sessions,critical:,warning:

    # Parse options using getopt
    OPTIONS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
        handle_unknown "Failed to parse arguments"
    fi

    # Reorder positional parameters
    eval set -- "${OPTIONS}"

    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -a|--all-sessions)
                SESSIONS=1
                shift
                ;;    
            -c|--critical)
                CRITICAL_LEVEL="$2"
                shift 2
                ;;
            -w|--warning)
                WARNING_LEVEL="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                handle_unknown "Unknown option: $1"
                ;;
        esac
    done

    # Validate warning and critical values
    if (( $(echo "${WARNING_LEVEL} >= ${CRITICAL_LEVEL}" | bc -l) )); then
        handle_unknown "Warning threshold must be lower than critical threshold"
    fi

    main
}

# Handle OK / Warning / Critical / Unknown
function handle_ok() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }OK - ${message}${perfdata:+ | ${perfdata}}"
    exit 0
}

function handle_warning() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }WARNING - ${message}${perfdata:+ | ${perfdata}}"
    exit 1
}

function handle_critical() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }CRITICAL - ${message}${perfdata:+ | ${perfdata}}"
    exit 2
}

function handle_unknown() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }UNKNOWN - ${message}${perfdata:+ | ${perfdata}}"
    exit 3
}

# Core
process_arguments "${@}"