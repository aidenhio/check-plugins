#!/bin/bash
# shellcheck disable=SC2312

# Plugin Name: check_temp
# Description: Checks CPU temperature
# Date: 13/10/2025

# Flags
ALLOW_ZERO_INPUT=true
PREFIX="TEMP"

# Global Variables
WARNING_LEVEL=70
CRITICAL_LEVEL=90

# Main
function main()
{
    local temp core_temp all_core_temps
    local arch pi
    local message data

    # Check for lm-sensors
    if ! command -v sensors >/dev/null 2>&1; then
        handle_unknown "'lm-sensors' not found."
    fi

    # Detect platform
    arch=$(uname -m)
    pi=false
    if [[ "$arch" == "armv7l" || "$arch" == "aarch64" ]]; then
        pi=true
    fi

    # Extract CPU temp using lm-sensors, based on platform
    if $pi; then
        # Raspberry Pi: look for cpu_thermal-virtual-0 temp1
        temp=$(sensors | awk '/cpu_thermal-virtual-0/,/^$/' | awk '/temp1:/ {gsub(/[+°C]/, "", $2); print int($2); exit}')
        
        # Fallback if no temp found
        if [[ -z "$temp" ]]; then
            handle_unknown "Unable to read CPU temperature"
        fi

        # Generate perfdata
        data="cpu_temp=${temp}°C;${WARNING_LEVEL};${CRITICAL_LEVEL};;"
    else
        # x86: look for Core 0 or Package id 0
        all_core_temps=()
        while IFS= read -r line; do
            core_temp=$(echo "$line" | awk '{gsub(/[+°C]/, "", $3); print int($3)}')
            all_core_temps+=("$core_temp")
        done < <(sensors | awk '/Core [0-9]+/')

        # Fallback if no cores found
        if [[ ${#all_core_temps[@]} -eq 0 ]]; then
            handle_unknown "No core temperatures found"
        fi

        # Use highest temp for status
        temp=$(printf "%s\n" "${all_core_temps[@]}" | sort -nr | head -n1)

        # Generate perfdata
        data="cpu_temp=${temp}°C;${WARNING_LEVEL};${CRITICAL_LEVEL};; "
        for i in "${!all_core_temps[@]}"; do
            data+="core${i}=${all_core_temps[$i]};;;; "
        done
    fi

    # Generate output
    message="CPU temperature is ${temp}°C"

    # Compare to threshold values
    if (( $(echo "${temp} >= ${CRITICAL_LEVEL}" | bc -l) )); then
        handle_critical "${message}" "${data}"
    elif (( $(echo "${temp} >= ${WARNING_LEVEL}" | bc -l) )); then
        handle_warning "${message}" "${data}"
    elif (( $(echo "${temp} >= 0" | bc -l) )); then
        handle_ok "${message}" "${data}"
    else
        handle_unknown "Invalid CPU tempature" "${data}"
    fi
}

# Usage (-h parameter)
function usage()
{
cat <<EOF
  Usage: $0 [ -h ] [ -c value ] [ -w value ]
    -h, --help      : Print this screen
    -c, --critical  : Critical CPU temperature [Default: ${CRITICAL_LEVEL}]
    -w, --warning   : Warn CPU temperature [Default: ${WARNING_LEVEL}]
EOF
    exit 0
}

# Process Arguments
function process_arguments()
{
    # Check if no arguments is allowed
    if [[ "${ALLOW_ZERO_INPUT}" = false ]] && [[ $# -eq 0 ]]; then
        handle_unknown "No parameters given"
    fi

    # Define short and long options
    SHORTOPTS=h,c:,w:
    LONGOPTS=help,critical:,warning:

    # Parse options using getopt
    OPTIONS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
        handle_unknown "Failed to parse arguments"
    fi

    # Reorder positional parameters
    eval set -- "${OPTIONS}"

    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -c|--critical)
                CRITICAL_LEVEL="$2"
                shift 2
                ;;
            -w|--warning)
                WARNING_LEVEL="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                handle_unknown "Unknown option: $1"
                ;;
        esac
    done

    # Validate warning and critical values
    if (( $(echo "${WARNING_LEVEL} >= ${CRITICAL_LEVEL}" | bc -l) )); then
        handle_unknown "Warning threshold must be lower than critical threshold"
    fi

    main
}

# Handle OK / Warning / Critical / Unknown
function handle_ok() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }OK - ${message}${perfdata:+ | ${perfdata}}"
    exit 0
}

function handle_warning() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }WARNING - ${message}${perfdata:+ | ${perfdata}}"
    exit 1
}

function handle_critical() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }CRITICAL - ${message}${perfdata:+ | ${perfdata}}"
    exit 2
}

function handle_unknown() {
    local message="${1:-}"
    local perfdata="${2:-}"
    echo "${PREFIX:+${PREFIX} }UNKNOWN - ${message}${perfdata:+ | ${perfdata}}"
    exit 3
}

# Core
process_arguments "${@}"